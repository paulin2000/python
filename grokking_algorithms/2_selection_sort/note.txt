- If you want to store multiple items in computer memory, there are two basic ways to
do so: arrays and lists.
- Array -
    l'insertion d'un élément au début du tableau ou à une position spécifique peut être plus coûteuse en termes de temps, car cela nécessite de déplacer tous les éléments suivants vers la droite pour faire de la place pour le nouvel élément. Cela peut avoir une complexité de O(n), où n est la taille du tableau.
    Il est important de noter que la complexité de l'insertion peut également être affectée par le type de données stockées dans le tableau. Par exemple, si vous stockez des objets complexes dans le tableau, l'insertion peut prendre plus de temps car chaque objet doit être chargé en mémoire.
- Linked Lists -
    With linked lists, your items can be anywhere in memory.
    linked lists are so much better at inserts
    Linked lists are great if you’re going to read all the items one at a time: you can read one item, follow the address to the next item, and so on. But if you’re going to keep jumping around, linked lists are terrible.
    si vous devez accéder aux éléments de la liste de manière aléatoire, les listes chaînées peuvent être très inefficaces. Cela est dû au fait que pour accéder à un élément spécifique, vous devez parcourir la liste à partir de la tête jusqu'à l'élément souhaité, ce qui peut prendre beaucoup de temps si la liste est grande. En revanche, les tableaux sont plus efficaces pour accéder à des éléments de manière aléatoire, car ils permettent un accès direct à n'importe quel élément en utilisant son index.
- Array or Lists -
    Which are used more: arrays or lists? Obviously, it depends on the use
    case. But arrays see a lot of use because they allow random access. There
    are two different types of access: random access and sequential access.
    Sequential access means reading the elements one by one, starting
    at the first element. Linked lists can only do sequential access. If you
    want to read the 10th element of a linked list, you have to read the first
    9 elements and follow the links to the 10th element. Random access
    means you can jump directly to the 10th element. You’ll frequently
    hear me say that arrays are faster at reads. This is because they provide
    random access. A lot of use cases require random access, so arrays are
    used a lot. Arrays and lists are used to implement other data structures,
    too (coming up later in the book).
- Recap - 
    • With an array, all your elements are stored right next to each other.
    • With a list, elements are strewn all over, and one element stores
    the address of the next one.
    • Arrays allow fast reads.
    • Linked lists allow fast inserts and deletes.
    • All elements in the array should be the same type (all ints,
    all doubles, and so on).